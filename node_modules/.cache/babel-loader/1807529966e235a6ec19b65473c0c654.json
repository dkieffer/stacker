{"ast":null,"code":"var _jsxFileName = \"/Users/david/repos/stacker/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Stack from './stack';\nimport Token from './token';\nimport Menu from './menu';\nimport Win from './win';\nimport Game from './game';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeView: 'start',\n      tokens: [],\n      stacks: [],\n      game: {\n        tokenSet: 4,\n        colorSet: 2,\n        stacks: 3,\n        stackCapacity: 4,\n        level: 1\n      },\n      selectedStack: null,\n      previouslySelectedStack: null,\n      selectedToken: null\n    };\n    this.chooseRandomStack = this.chooseRandomStack.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.manageStackAction = this.manageStackAction.bind(this);\n    this.selectStack = this.selectStack.bind(this);\n    this.deselectStack = this.deselectStack.bind(this);\n    this.moveToken = this.moveToken.bind(this);\n    this.quitGame = this.quitGame.bind(this);\n    this.initGame = this.initGame.bind(this);\n  }\n\n  initGame(lvlup) {\n    console.log('init game');\n\n    if (!localStorage.getItem('level')) {\n      localStorage.setItem('level', 1);\n    }\n\n    let lvl = localStorage.getItem('level');\n\n    if (lvlup) {\n      lvl++;\n    }\n\n    localStorage.setItem('level', lvl);\n    this.setState(state => ({\n      game: { ...state.game,\n        level: lvl\n      }\n    }), function () {\n      this.setupGame();\n    });\n  }\n\n  setupGame() {\n    console.log('setup game');\n    var stackQuantity = Math.floor(this.state.game.level * 0.25) + 3;\n    console.log('stack quantity: ' + stackQuantity);\n    this.setState(state => ({\n      game: { ...state.game,\n        stacks: stackQuantity,\n        colorSet: stackQuantity - 1\n      }\n    }), function () {\n      this.startGame();\n    });\n  }\n\n  startGame() {\n    console.log('start game');\n    const colors = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'];\n    let xPosSpacing = 48;\n    var stackPositions = this.positionStacks(this.state.game.stacks);\n    console.log(stackPositions);\n    let stacks = [];\n\n    for (let i = 0; i < this.state.game.stacks; i++) {\n      let stack = {\n        id: i,\n        xPos: stackPositions[i].xPos,\n        yPos: stackPositions[i].yPos,\n        contents: [],\n        selected: false\n      };\n      stacks.push(stack);\n    }\n\n    console.log(stacks);\n    let tokens = [];\n    let tokenCounter = 0;\n\n    for (let i = 0; i < this.state.game.tokenSet; i++) {\n      for (var j = 0; j < this.state.game.colorSet; j++) {\n        let chosenStack = this.chooseRandomStack(stacks);\n        let token = {\n          id: tokenCounter,\n          color: colors[j],\n          stack: chosenStack,\n          stackPos: stacks[chosenStack].contents.length,\n          xPos: stacks[chosenStack].xPos,\n          yPos: -stacks[chosenStack].contents.length * 25 + (stacks[chosenStack].yPos + 103 - 25)\n        };\n        tokenCounter++;\n        stacks[chosenStack].contents.push(token.id);\n        tokens.push(token);\n      }\n    }\n\n    console.log('ready to set state');\n    this.setState(state => ({\n      activeView: 'game',\n      stacks: stacks,\n      tokens: tokens\n    }), function () {\n      console.log(this.state.stacks);\n    });\n  }\n\n  positionStacks(stacks) {\n    console.log('position stacks');\n    const maxRowLength = 5;\n    const stackWidth = 48;\n    const stackHeight = 103;\n    const stackSpacer = 12;\n    var stackQuantity = stacks;\n    var rowQuantity = Math.ceil(stackQuantity / maxRowLength);\n    var fullRowQuantity = Math.ceil(stackQuantity / rowQuantity);\n    var remainderRowQuantity = stackQuantity % fullRowQuantity;\n\n    if (remainderRowQuantity === 0) {\n      remainderRowQuantity = fullRowQuantity;\n    }\n\n    var rowInventory = [];\n\n    if (stackQuantity < maxRowLength) {\n      rowInventory.push(stackQuantity);\n    } else {\n      rowInventory.push(remainderRowQuantity);\n\n      for (var i = 0; i < rowQuantity - 1; i++) {\n        rowInventory.push(fullRowQuantity);\n      }\n    } // console.log(rowInventory);\n\n\n    var stackPositions = [];\n    let centerYOffset = (rowQuantity * stackHeight + (rowQuantity - 1) * stackSpacer) / 2;\n\n    for (var i = 0; i < rowInventory.length; i++) {\n      let centerXOffset = (rowInventory[i] * stackWidth + (rowInventory[i] - 1) * stackSpacer) / 2;\n\n      for (var j = 0; j < rowInventory[i]; j++) {\n        let coords = {\n          xPos: stackWidth * j + stackSpacer * j - centerXOffset,\n          yPos: stackHeight * i + stackSpacer * i - centerYOffset\n        };\n        stackPositions.push(coords);\n      }\n    } // console.log(stackPositions);\n\n\n    return stackPositions;\n  }\n\n  chooseRandomStack(stackSet) {\n    console.log('choose random stack');\n    var stackChoice = Math.floor(Math.random() * this.state.game.stacks);\n\n    while (stackSet[stackChoice].contents.length > this.state.game.stackCapacity - 1) {\n      stackChoice = Math.floor(Math.random() * this.state.game.stacks);\n    }\n\n    return stackChoice;\n  }\n\n  manageStackAction(id) {\n    if (this.state.selectedStack === null) {\n      if (this.state.stacks[id].contents.length > 0) {\n        this.setState(state => ({\n          previouslySelectedStack: id\n        }));\n        this.selectStack(id);\n      } else {\n        return;\n      }\n    } else {\n      if (this.state.selectedStack === id) {\n        this.deselectStack(id);\n      } else {\n        if (this.state.stacks[id].contents.length >= this.state.game.stackCapacity) {\n          this.deselectStack(this.state.previouslySelectedStack);\n        } else {\n          let oldStackContent = Array.from(this.state.stacks[this.state.previouslySelectedStack].contents); // console.log('old stack content below'); \n\n          oldStackContent.pop(); // console.log(oldStackContent);\n\n          this.setState(state => ({\n            stacks: state.stacks.map(el => el.id === state.previouslySelectedStack ? { ...el,\n              contents: oldStackContent\n            } : el)\n          }), function () {\n            this.moveToken(id);\n          });\n        }\n      }\n    }\n  }\n\n  selectStack(id) {\n    let topToken;\n    topToken = this.state.stacks[id].contents[this.state.stacks[id].contents.length - 1];\n    this.setState(state => ({\n      selectedStack: id,\n      selectedToken: topToken\n    }));\n  }\n\n  deselectStack(id) {\n    // console.log('deselect');\n    this.setState(state => ({\n      selectedStack: null,\n      selectedToken: null\n    }));\n  }\n\n  moveToken(stackID) {\n    // console.log(stackID);\n    let key = this.state.selectedToken;\n    let newStackContent = Array.from(this.state.stacks[stackID].contents); // console.log(newStackContent);\n\n    newStackContent.push(this.state.selectedToken);\n    this.deselectStack(stackID);\n    this.setState(state => ({\n      tokens: state.tokens.map(el => el.id === key ? { ...el,\n        xPos: state.stacks[stackID].xPos,\n        yPos: -state.stacks[stackID].contents.length * 25 + (state.stacks[stackID].yPos + 103 - 25)\n      } : el),\n      stacks: state.stacks.map(el => el.id === stackID ? { ...el,\n        contents: newStackContent\n      } : el)\n    }), this.checkForWin); // console.log(this.state.stacks);\n  }\n\n  checkForWin() {\n    console.log('CHECK FOR WIN');\n\n    for (var i = 0; i < this.state.stacks.length; i++) {\n      // console.log('Stack ' + i);\n      // console.log('Contents: ' + this.state.stacks[i].contents);\n      if (this.state.stacks[i].contents.length !== this.state.game.tokenSet && this.state.stacks[i].contents.length !== 0) {\n        // console.log('Stack not full, quit this check');\n        return;\n      }\n\n      for (var j = 0; j < this.state.stacks[i].contents.length; j++) {\n        console.log('stack ' + i + ', token ' + j);\n\n        if (this.state.tokens[this.state.stacks[i].contents[j]].color !== this.state.tokens[this.state.stacks[i].contents[0]].color) {\n          // console.log('fail');\n          return;\n        }\n      }\n    }\n\n    this.endGame();\n    console.log('you win');\n  }\n\n  endGame() {\n    this.setState(state => ({\n      activeView: 'win'\n    }));\n  }\n\n  quitGame() {\n    this.setState(state => ({\n      activeView: 'start'\n    }));\n  }\n\n  getState() {\n    console.log(this.state);\n  }\n\n  render() {\n    let stacks = [];\n\n    for (var i = 0; i < this.state.stacks.length; i++) {\n      let xPos = this.state.stacks[i].xPos + '%';\n      let height = this.state.game.stackCapacity * 45 + 'px';\n      stacks.push( /*#__PURE__*/React.createElement(Stack, {\n        top: \"50%\",\n        left: xPos,\n        height: height,\n        id: i,\n        function: this.manageStackAction,\n        selected: this.state.selectedStack,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 19\n        }\n      }));\n    }\n\n    let tokens = [];\n\n    for (var i = 0; i < this.state.tokens.length; i++) {\n      let xPos = this.state.tokens[i].xPos + '%';\n      let yPos = this.state.tokens[i].yPos + '%';\n      tokens.push( /*#__PURE__*/React.createElement(Token, {\n        id: this.state.tokens[i].id,\n        color: this.state.tokens[i].color,\n        xPos: xPos,\n        yPos: yPos,\n        selected: this.state.selectedToken,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 19\n        }\n      }));\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Menu, {\n      startGame: this.initGame,\n      activeView: this.state.activeView,\n      level: this.state.game.leve,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Win, {\n      startGame: this.initGame,\n      activeView: this.state.activeView,\n      level: this.state.game.level,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Game, {\n      stacks: this.state.stacks,\n      game: this.state.game,\n      selectStack: this.state.selectedStack,\n      tokens: this.state.tokens,\n      selectedToken: this.state.selectedToken,\n      activeView: this.state.activeView,\n      manageStackAction: this.manageStackAction,\n      quitGame: this.quitGame,\n      level: this.state.game.level,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/david/repos/stacker/src/App.js"],"names":["React","Stack","Token","Menu","Win","Game","App","Component","constructor","props","state","activeView","tokens","stacks","game","tokenSet","colorSet","stackCapacity","level","selectedStack","previouslySelectedStack","selectedToken","chooseRandomStack","bind","startGame","manageStackAction","selectStack","deselectStack","moveToken","quitGame","initGame","lvlup","console","log","localStorage","getItem","setItem","lvl","setState","setupGame","stackQuantity","Math","floor","colors","xPosSpacing","stackPositions","positionStacks","i","stack","id","xPos","yPos","contents","selected","push","tokenCounter","j","chosenStack","token","color","stackPos","length","maxRowLength","stackWidth","stackHeight","stackSpacer","rowQuantity","ceil","fullRowQuantity","remainderRowQuantity","rowInventory","centerYOffset","centerXOffset","coords","stackSet","stackChoice","random","oldStackContent","Array","from","pop","map","el","topToken","stackID","key","newStackContent","checkForWin","endGame","getState","render","height","leve"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Stack from './stack';\nimport Token from './token';\nimport Menu from './menu';\nimport Win from './win';\nimport Game from './game';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      activeView: 'start',\n      tokens: [],\n      stacks: [],\n      game: {\n        tokenSet: 4,\n        colorSet: 2,\n        stacks: 3,\n        stackCapacity: 4,\n        level: 1\n      },\n      selectedStack: null,\n      previouslySelectedStack: null,\n      selectedToken: null\n    }\n    this.chooseRandomStack = this.chooseRandomStack.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.manageStackAction = this.manageStackAction.bind(this);\n    this.selectStack = this.selectStack.bind(this);\n    this.deselectStack = this.deselectStack.bind(this);\n    this.moveToken = this.moveToken.bind(this);\n    this.quitGame = this.quitGame.bind(this);\n    this.initGame = this.initGame.bind(this);\n  }\n\n  initGame(lvlup) {\n    console.log('init game');\n    if (!localStorage.getItem('level')) {\n      localStorage.setItem('level', 1);\n    }\n    let lvl = localStorage.getItem('level');\n    if (lvlup) {\n      lvl++;\n    }\n    localStorage.setItem('level', lvl);\n\n    this.setState((state) => ({\n      game: {\n        ...state.game,\n        level: lvl\n      }\n    }), function() {this.setupGame()})\n  }\n\n  setupGame() {\n    console.log('setup game');\n    var stackQuantity = (Math.floor(this.state.game.level * 0.25) + 3);\n    console.log('stack quantity: ' + stackQuantity);\n    this.setState((state) => ({\n      game: {\n        ...state.game,\n        stacks: stackQuantity,\n        colorSet: stackQuantity - 1\n      }\n    }), function() {this.startGame()})\n  }\n\n  startGame() {\n    console.log('start game');\n    const colors = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'];\n    let xPosSpacing = 48;\n    var stackPositions = this.positionStacks(this.state.game.stacks);\n    console.log(stackPositions);\n    let stacks = [];\n    for (let i = 0; i < this.state.game.stacks; i++) {\n      let stack = {\n        id: i,\n        xPos: stackPositions[i].xPos,\n        yPos: stackPositions[i].yPos,\n        contents: [],\n        selected: false\n      }\n      stacks.push(stack);\n    }\n    console.log(stacks);\n\n    let tokens = [];\n    let tokenCounter = 0;\n    for (let i = 0; i < (this.state.game.tokenSet); i++) {\n      for (var j = 0; j < this.state.game.colorSet; j++) {\n        \n        let chosenStack = this.chooseRandomStack(stacks);\n        let token = {\n          id: tokenCounter,\n          color: colors[j],\n          stack: chosenStack,\n          stackPos: stacks[chosenStack].contents.length,\n          xPos: stacks[chosenStack].xPos,\n          yPos: (-stacks[chosenStack].contents.length * 25) + (stacks[chosenStack].yPos + 103 - 25)\n        }\n        tokenCounter++;\n        stacks[chosenStack].contents.push(token.id)\n        tokens.push(token);\n      }\n    }\n    console.log('ready to set state');\n    this.setState((state) => ({\n      activeView: 'game',\n      stacks: stacks,\n      tokens: tokens\n    }), function() {console.log(this.state.stacks)})\n  }\n\n  positionStacks(stacks) {\n    console.log('position stacks');\n    const maxRowLength = 5;\n    const stackWidth = 48;\n    const stackHeight = 103;\n    const stackSpacer = 12;\n\n    var stackQuantity = stacks;\n    var rowQuantity = Math.ceil(stackQuantity / maxRowLength);\n    var fullRowQuantity = Math.ceil(stackQuantity / rowQuantity);\n    var remainderRowQuantity = stackQuantity % fullRowQuantity;\n    if (remainderRowQuantity === 0) {\n      remainderRowQuantity = fullRowQuantity;\n    }\n    var rowInventory = [];\n    if (stackQuantity < maxRowLength) {\n      rowInventory.push(stackQuantity);\n    } else {\n      rowInventory.push(remainderRowQuantity);\n      for (var i = 0; i < rowQuantity - 1; i++) {\n        rowInventory.push(fullRowQuantity);\n      }\n    }\n    // console.log(rowInventory);\n    \n    var stackPositions = [];\n    let centerYOffset = (((rowQuantity * stackHeight) + ((rowQuantity - 1) * stackSpacer)) / 2);\n    for (var i = 0; i < rowInventory.length; i++) {\n      let centerXOffset = (((rowInventory[i] * stackWidth) + ((rowInventory[i] - 1) * stackSpacer)) / 2);\n      for(var j = 0; j < rowInventory[i]; j++) {\n        let coords = {\n          xPos: (stackWidth * j) + (stackSpacer * j) - centerXOffset,\n          yPos: (stackHeight * i) + (stackSpacer * i) - centerYOffset\n        }\n        stackPositions.push(coords);\n      }\n    }\n    // console.log(stackPositions);\n    return stackPositions;\n  }\n\n  chooseRandomStack(stackSet) {\n    console.log('choose random stack');\n    var stackChoice = Math.floor(Math.random() * this.state.game.stacks);\n    while (stackSet[stackChoice].contents.length > this.state.game.stackCapacity - 1) {\n      stackChoice = Math.floor(Math.random() * this.state.game.stacks)\n    }\n    return stackChoice;\n  }\n\n  manageStackAction(id) {\n    if (this.state.selectedStack === null) {\n      if (this.state.stacks[id].contents.length > 0) {\n        this.setState((state) => ({\n          previouslySelectedStack: id\n        }))\n        this.selectStack(id);\n      } else {\n        return\n      }\n    } else {\n      if (this.state.selectedStack === id) {\n        this.deselectStack(id);\n      } else {\n        if (this.state.stacks[id].contents.length >= this.state.game.stackCapacity) {\n          this.deselectStack(this.state.previouslySelectedStack);\n        } else {\n          let oldStackContent = Array.from(this.state.stacks[this.state.previouslySelectedStack].contents);\n          // console.log('old stack content below'); \n          oldStackContent.pop();\n          // console.log(oldStackContent);\n          this.setState((state) => ({\n            stacks: state.stacks.map(\n              el => (el.id === state.previouslySelectedStack) ? {\n                ...el,\n                contents: oldStackContent,\n              } : el\n            )\n          }), function() {this.moveToken(id)})\n        }\n      }\n    }\n  }\n\n  selectStack(id) {\n    let topToken;\n    topToken = this.state.stacks[id].contents[this.state.stacks[id].contents.length - 1];\n    this.setState((state) => ({\n      selectedStack: id,\n      selectedToken: topToken\n    }))\n  }\n\n  deselectStack(id) {\n    // console.log('deselect');\n    this.setState((state) => ({\n      selectedStack: null,\n      selectedToken: null\n    }))\n  }\n\n  moveToken(stackID) {\n    // console.log(stackID);\n    let key = this.state.selectedToken;\n    let newStackContent = Array.from(this.state.stacks[stackID].contents);\n    // console.log(newStackContent);\n    newStackContent.push(this.state.selectedToken);\n    this.deselectStack(stackID);\n    this.setState((state) => ({\n      tokens: state.tokens.map(\n        el => (el.id === key) ? {\n          ...el,\n          xPos: state.stacks[stackID].xPos,\n          yPos: ((-state.stacks[stackID].contents.length * 25) + (state.stacks[stackID].yPos + 103 - 25))\n        } : el\n      ),\n      stacks: state.stacks.map(\n        el => (el.id === stackID) ? {\n          ...el,\n          contents: newStackContent,\n        } : el\n      )\n    }), this.checkForWin)\n    // console.log(this.state.stacks);\n  }\n\n  checkForWin() {\n    console.log('CHECK FOR WIN');\n    for (var i = 0; i < this.state.stacks.length; i++) {\n      // console.log('Stack ' + i);\n      // console.log('Contents: ' + this.state.stacks[i].contents);\n      if (this.state.stacks[i].contents.length !== this.state.game.tokenSet && this.state.stacks[i].contents.length !== 0) {\n        // console.log('Stack not full, quit this check');\n        return\n      }\n      for (var j = 0; j < this.state.stacks[i].contents.length; j++) {\n        console.log('stack '  + i + ', token ' + j);\n        if (this.state.tokens[this.state.stacks[i].contents[j]].color !== this.state.tokens[this.state.stacks[i].contents[0]].color) {\n          // console.log('fail');\n          return\n        }\n      }\n    }\n    this.endGame();\n    console.log('you win');\n  }\n\n  endGame() {\n    this.setState((state) => ({\n      activeView: 'win',\n    }));\n  }\n\n  quitGame() {\n    this.setState((state) => ({\n      activeView: 'start',\n    }));\n  }\n\n  getState() {\n    console.log(this.state);\n  }\n\n\n  render() {\n    let stacks = [];\n    for (var i = 0; i < this.state.stacks.length; i++) {\n      let xPos = this.state.stacks[i].xPos  + '%';\n      let height = (this.state.game.stackCapacity * 45) + 'px';\n      stacks.push(<Stack top=\"50%\" left={xPos} height={height} id={i} function={this.manageStackAction} selected={this.state.selectedStack} />);\n    }\n    let tokens = [];\n    for (var i = 0; i < this.state.tokens.length; i++) {\n      let xPos = this.state.tokens[i].xPos  + '%';\n      let yPos = this.state.tokens[i].yPos  + '%';\n      tokens.push(<Token id={this.state.tokens[i].id} color={this.state.tokens[i].color} xPos={xPos} yPos={yPos} selected={this.state.selectedToken} />);\n    }\n\n    return (\n        <div className=\"App\">\n          <Menu startGame={this.initGame} activeView={this.state.activeView} level={this.state.game.leve} />\n          <Win startGame={this.initGame} activeView={this.state.activeView} level={this.state.game.level} />\n          <Game \n            stacks={this.state.stacks}\n            game={this.state.game}\n            selectStack={this.state.selectedStack}\n            tokens={this.state.tokens}\n            selectedToken={this.state.selectedToken}\n            activeView={this.state.activeView} \n            manageStackAction={this.manageStackAction}\n            quitGame={this.quitGame}\n            level={this.state.game.level}\n          />\n\n        </div>\n      );\n    }\n  }\n  \nexport default App;\n"]},"metadata":{},"sourceType":"module"}