{"version":3,"sources":["logo.svg","stack.js","token.js","menu.js","win.js","game.js","settings.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Stack","props","divStyle","top","this","left","height","id","className","selected","style","onClick","function","React","Component","Token","yPos","xPos","color","Menu","activeView","initGame","toggleSettings","Win","startGame","Game","stacks","i","length","console","log","push","manageStackAction","selectedStack","tokens","selectedToken","level","quitGame","moveCounter","Settings","startOver","App","state","game","tokenSet","colorSet","stackCapacity","previouslySelectedStack","previousView","chooseRandomStack","bind","selectStack","deselectStack","moveToken","checkSavedLevel","localStorage","getItem","setItem","lvl","setState","lvlup","setupGame","stackQuantity","Math","floor","colors","stackPositions","positionStacks","stack","contents","tokenCounter","j","chosenStack","token","stackPos","rowQuantity","ceil","fullRowQuantity","remainderRowQuantity","rowInventory","centerYOffset","centerXOffset","coords","stackSet","stackChoice","random","oldStackContent","Array","from","pop","map","el","topToken","stackID","key","newStackContent","checkForWin","endGame","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.18817cdd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\n// import './App.css';\n\nclass Stack extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        const divStyle = {\n            top: this.props.top,\n            left: this.props.left,\n            height: this.props.height\n        };\n        let id = this.props.id;\n        let className = 'stack';\n        // console.log(this.props.selected);\n        if (this.props.selected === this.props.id) {\n            className += ' selected';\n        }\n\n        return (\n            <div id={'s' + this.props.id} className={className} style={divStyle} onClick={() => this.props.function(id)}></div>\n        )\n    }\n}\n\nexport default Stack","import React from 'react';\n// import './App.css';\nimport './colors.scss';\n\nclass Token extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        var divStyle = {\n            // backgroundColor: this.props.color,\n            top: this.props.yPos,\n            left: this.props.xPos\n        };\n        let className = 'token ' + this.props.color;\n        if (this.props.selected === this.props.id) {\n            className += ' selected';\n        }\n        return (\n            <div className={className} style={divStyle} id={'t' + this.props.id}></div>\n        )\n    }\n}\n\nexport default Token","import React from 'react';\n// import './App.css';\n\nclass Menu extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let className = 'view';\n        if (this.props.activeView === 'start') {\n            className += ' active';\n        }\n\n        return (\n            <div className={className}>\n                <div>\n                    <h1>Stacker</h1>\n                    <button className=\"button\" onClick={() => this.props.initGame()}>Play</button>\n                    <button className=\"button exit-button top left\" onClick={() => this.props.toggleSettings()}>Settings</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Menu","import React from 'react';\n// import './App.css';\n\nclass Win extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let className = 'view';\n        if (this.props.activeView === 'win') {\n            className += ' active';\n        }\n\n        return (\n            <div className={className}>\n                <div className=\"center-view\">\n                    <h1>You Stacked</h1>\n                    <button className=\"button\" onClick={() => this.props.startGame(true)}>Continue</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Win","import React from 'react';\n// import './App.css';\nimport Stack from './stack';\nimport Token from './token';\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let className = 'view';\n        if (this.props.activeView === 'game') {\n            className += ' active';\n        }\n\n        let stacks = [];\n        for (var i = 0; i < this.props.stacks.length; i++) {\n            let xPos = 'calc(50vw + ' + this.props.stacks[i].xPos + 'px)';\n            let yPos = 'calc(' + this.props.stacks[i].yPos + 'px + 50vh)';\n            let height = '103px';\n            console.log(this.props.stacks[i].yPos);\n            console.log(yPos);\n            stacks.push(<Stack top={yPos} left={xPos} height={height} id={i} function={this.props.manageStackAction} selected={this.props.selectedStack} />);\n        }\n\n        let tokens = [];\n        for (var i = 0; i < this.props.tokens.length; i++) {\n            let xPos = 'calc(' + this.props.tokens[i].xPos + 'px + 50vw)';\n            let yPos = 'calc(' + this.props.tokens[i].yPos + 'px + 50vh)';\n            tokens.push(<Token id={this.props.tokens[i].id} color={this.props.tokens[i].color} xPos={xPos} yPos={yPos} selected={this.props.selectedToken} />);\n        }\n    \n        return (\n            <div className={className}>\n                <div>\n                    {stacks}\n                    {tokens}\n                </div>\n                <div>\n                    <p className=\"hud\">{this.props.level}</p>\n                    <button className=\"button exit-button\" onClick={() => this.props.quitGame()}>Exit</button>\n                    <p className=\"counter\">{this.props.moveCounter}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Game","import React from 'react';\n// import './App.css';\n\nclass Settings extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let className = 'view';\n        if (this.props.activeView === 'settings') {\n            className += ' active';\n        }\n\n        return (\n            <div className={className}>\n                <div className=\"\">\n                    <h1>Settings</h1>\n                    <p>Level {this.props.level}<button className=\"button\" onClick={() => this.props.startOver()}>Start Over</button></p>\n                    <button className=\"button exit-button top left\" onClick={() => this.props.quitGame()}>Exit</button>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Settings","import React from 'react';\nimport './App.css';\nimport Stack from './stack';\nimport Token from './token';\nimport Menu from './menu';\nimport Win from './win';\nimport Game from './game';\nimport Settings from './settings';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      activeView: 'start',\n      tokens: [],\n      stacks: [],\n      game: {\n        tokenSet: 4,\n        colorSet: 2,\n        stacks: 3,\n        stackCapacity: 4,\n        level: 1\n      },\n      selectedStack: null,\n      previouslySelectedStack: null,\n      selectedToken: null,\n      moveCounter: 0,\n      previousView: 'start'\n    }\n    this.chooseRandomStack = this.chooseRandomStack.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.manageStackAction = this.manageStackAction.bind(this);\n    this.selectStack = this.selectStack.bind(this);\n    this.deselectStack = this.deselectStack.bind(this);\n    this.moveToken = this.moveToken.bind(this);\n    this.quitGame = this.quitGame.bind(this);\n    this.initGame = this.initGame.bind(this);\n    this.toggleSettings = this.toggleSettings.bind(this);\n    this.startOver = this.startOver.bind(this);\n  }\n  componentDidMount() {\n    console.log('hey der hey')\n    this.checkSavedLevel();\n  }\n\n  checkSavedLevel() {\n    if (!localStorage.getItem('level')) {\n      localStorage.setItem('level', 1);\n    }\n    let lvl = localStorage.getItem('level');\n    this.setState((state) => ({\n      game: {\n        ...state.game,\n        level: lvl\n      }\n    }))\n  }\n\n  initGame(lvlup) {\n    console.log('init game');\n    if (!localStorage.getItem('level')) {\n      localStorage.setItem('level', 1);\n    }\n    let lvl = localStorage.getItem('level');\n    if (lvlup) {\n      lvl++;\n    }\n    localStorage.setItem('level', lvl);\n\n    this.setState((state) => ({\n      moveCounter: 0\n    }), function() {this.setupGame()})\n  }\n\n  setupGame() {\n    console.log('setup game');\n    var stackQuantity = (Math.floor(this.state.game.level * 0.25) + 3);\n    console.log('stack quantity: ' + stackQuantity);\n    this.setState((state) => ({\n      game: {\n        ...state.game,\n        stacks: stackQuantity,\n        colorSet: stackQuantity - 1\n      }\n    }), function() {this.startGame()})\n  }\n\n  startGame() {\n    console.log('start game');\n    const colors = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'];\n    let xPosSpacing = 48;\n    var stackPositions = this.positionStacks(this.state.game.stacks);\n    console.log(stackPositions);\n    let stacks = [];\n    for (let i = 0; i < this.state.game.stacks; i++) {\n      let stack = {\n        id: i,\n        xPos: stackPositions[i].xPos,\n        yPos: stackPositions[i].yPos,\n        contents: [],\n        selected: false\n      }\n      stacks.push(stack);\n    }\n    console.log(stacks);\n\n    let tokens = [];\n    let tokenCounter = 0;\n    for (let i = 0; i < (this.state.game.tokenSet); i++) {\n      for (var j = 0; j < this.state.game.colorSet; j++) {\n        \n        let chosenStack = this.chooseRandomStack(stacks);\n        let token = {\n          id: tokenCounter,\n          color: colors[j],\n          stack: chosenStack,\n          stackPos: stacks[chosenStack].contents.length,\n          xPos: stacks[chosenStack].xPos,\n          yPos: (-stacks[chosenStack].contents.length * 25) + (stacks[chosenStack].yPos + 103 - 25)\n        }\n        tokenCounter++;\n        stacks[chosenStack].contents.push(token.id)\n        tokens.push(token);\n      }\n    }\n    console.log('ready to set state');\n    this.setState((state) => ({\n      activeView: 'game',\n      stacks: stacks,\n      tokens: tokens\n    }), function() {console.log(this.state.stacks)})\n  }\n\n  positionStacks(stacks) {\n    console.log('position stacks');\n    const maxRowLength = 5;\n    const stackWidth = 48;\n    const stackHeight = 103;\n    const stackSpacer = 12;\n\n    var stackQuantity = stacks;\n    var rowQuantity = Math.ceil(stackQuantity / maxRowLength);\n    var fullRowQuantity = Math.ceil(stackQuantity / rowQuantity);\n    var remainderRowQuantity = stackQuantity % fullRowQuantity;\n    if (remainderRowQuantity === 0) {\n      remainderRowQuantity = fullRowQuantity;\n    }\n    var rowInventory = [];\n    if (stackQuantity < maxRowLength) {\n      rowInventory.push(stackQuantity);\n    } else {\n      rowInventory.push(remainderRowQuantity);\n      for (var i = 0; i < rowQuantity - 1; i++) {\n        rowInventory.push(fullRowQuantity);\n      }\n    }\n    // console.log(rowInventory);\n    \n    var stackPositions = [];\n    let centerYOffset = (((rowQuantity * stackHeight) + ((rowQuantity - 1) * stackSpacer)) / 2);\n    for (var i = 0; i < rowInventory.length; i++) {\n      let centerXOffset = (((rowInventory[i] * stackWidth) + ((rowInventory[i] - 1) * stackSpacer)) / 2);\n      for(var j = 0; j < rowInventory[i]; j++) {\n        let coords = {\n          xPos: (stackWidth * j) + (stackSpacer * j) - centerXOffset,\n          yPos: (stackHeight * i) + (stackSpacer * i) - centerYOffset\n        }\n        stackPositions.push(coords);\n      }\n    }\n    // console.log(stackPositions);\n    return stackPositions;\n  }\n\n  chooseRandomStack(stackSet) {\n    console.log('choose random stack');\n    var stackChoice = Math.floor(Math.random() * this.state.game.stacks);\n    while (stackSet[stackChoice].contents.length > this.state.game.stackCapacity - 1) {\n      stackChoice = Math.floor(Math.random() * this.state.game.stacks)\n    }\n    return stackChoice;\n  }\n\n  manageStackAction(id) {\n    if (this.state.selectedStack === null) {\n      if (this.state.stacks[id].contents.length > 0) {\n        this.setState((state) => ({\n          previouslySelectedStack: id\n        }))\n        this.selectStack(id);\n      } else {\n        return\n      }\n    } else {\n      if (this.state.selectedStack === id) {\n        this.deselectStack(id);\n      } else {\n        if (this.state.stacks[id].contents.length >= this.state.game.stackCapacity) {\n          this.deselectStack(this.state.previouslySelectedStack);\n        } else {\n          let oldStackContent = Array.from(this.state.stacks[this.state.previouslySelectedStack].contents);\n          // console.log('old stack content below'); \n          oldStackContent.pop();\n          // console.log(oldStackContent);\n          this.setState((state) => ({\n            stacks: state.stacks.map(\n              el => (el.id === state.previouslySelectedStack) ? {\n                ...el,\n                contents: oldStackContent,\n              } : el\n            )\n          }), function() {this.moveToken(id)})\n        }\n      }\n    }\n  }\n\n  selectStack(id) {\n    let topToken;\n    topToken = this.state.stacks[id].contents[this.state.stacks[id].contents.length - 1];\n    this.setState((state) => ({\n      selectedStack: id,\n      selectedToken: topToken\n    }))\n  }\n\n  deselectStack(id) {\n    // console.log('deselect');\n    this.setState((state) => ({\n      selectedStack: null,\n      selectedToken: null\n    }))\n  }\n\n  moveToken(stackID) {\n    // console.log(stackID);\n    let key = this.state.selectedToken;\n    let newStackContent = Array.from(this.state.stacks[stackID].contents);\n    // console.log(newStackContent);\n    newStackContent.push(this.state.selectedToken);\n    this.deselectStack(stackID);\n    this.setState((state) => ({\n      tokens: state.tokens.map(\n        el => (el.id === key) ? {\n          ...el,\n          xPos: state.stacks[stackID].xPos,\n          yPos: ((-state.stacks[stackID].contents.length * 25) + (state.stacks[stackID].yPos + 103 - 25))\n        } : el\n      ),\n      stacks: state.stacks.map(\n        el => (el.id === stackID) ? {\n          ...el,\n          contents: newStackContent,\n        } : el\n      ),\n      moveCounter: state.moveCounter++\n    }), this.checkForWin)\n    // console.log(this.state.stacks);\n  }\n\n  checkForWin() {\n    console.log('CHECK FOR WIN');\n    for (var i = 0; i < this.state.stacks.length; i++) {\n      // console.log('Stack ' + i);\n      // console.log('Contents: ' + this.state.stacks[i].contents);\n      if (this.state.stacks[i].contents.length !== this.state.game.tokenSet && this.state.stacks[i].contents.length !== 0) {\n        // console.log('Stack not full, quit this check');\n        return\n      }\n      for (var j = 0; j < this.state.stacks[i].contents.length; j++) {\n        console.log('stack '  + i + ', token ' + j);\n        if (this.state.tokens[this.state.stacks[i].contents[j]].color !== this.state.tokens[this.state.stacks[i].contents[0]].color) {\n          // console.log('fail');\n          return\n        }\n      }\n    }\n    this.endGame();\n    console.log('you win');\n  }\n\n  endGame() {\n    this.setState((state) => ({\n      activeView: 'win',\n    }));\n  }\n\n  quitGame() {\n    this.setState((state) => ({\n      activeView: 'start',\n    }));\n  }\n\n  getState() {\n    console.log(this.state);\n  }\n\n  toggleSettings() {\n    if (this.state.activeView !== 'settings') {\n      this.setState((state) => ({\n        activeView: 'settings',\n        previousView: state.previousView\n      }));\n    } else {\n      this.setState((state) => ({\n        activeView: state.previousView,\n        previousView: 'settings'\n      }));\n    }\n  }\n\n  startOver() {\n    localStorage.setItem('level', 1);\n    this.setState((state) => ({\n      game: {\n        ...state.game,\n        level: 1\n      }\n    }))\n  }\n\n  render() {\n    let stacks = [];\n    for (var i = 0; i < this.state.stacks.length; i++) {\n      let xPos = this.state.stacks[i].xPos  + '%';\n      let height = (this.state.game.stackCapacity * 45) + 'px';\n      stacks.push(<Stack top=\"50%\" left={xPos} height={height} id={i} function={this.manageStackAction} selected={this.state.selectedStack} />);\n    }\n    let tokens = [];\n    for (var i = 0; i < this.state.tokens.length; i++) {\n      let xPos = this.state.tokens[i].xPos  + '%';\n      let yPos = this.state.tokens[i].yPos  + '%';\n      tokens.push(<Token id={this.state.tokens[i].id} color={this.state.tokens[i].color} xPos={xPos} yPos={yPos} selected={this.state.selectedToken} />);\n    }\n\n    return (\n        <div className=\"App\">\n          <Settings \n            activeView={this.state.activeView}\n            quitGame={this.quitGame}\n            level={this.state.game.level}\n            startOver={this.startOver}\n          />\n          <Menu\n            initGame={this.initGame}\n            activeView={this.state.activeView}\n            level={this.state.game.level} \n            toggleSettings={this.toggleSettings}\n          />\n          <Win startGame={this.initGame} activeView={this.state.activeView} level={this.state.game.level} />\n          <Game \n            stacks={this.state.stacks}\n            game={this.state.game}\n            selectStack={this.state.selectedStack}\n            tokens={this.state.tokens}\n            selectedToken={this.state.selectedToken}\n            activeView={this.state.activeView} \n            manageStackAction={this.manageStackAction}\n            quitGame={this.quitGame}\n            level={this.state.game.level}\n            moveCounter={this.state.moveCounter}\n          />\n\n        </div>\n      );\n    }\n  }\n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}