{"version":3,"sources":["stack.js","token.js","menu.js","win.js","game.js","settings.js","App.js","serviceWorker.js","index.js"],"names":["Stack","props","divStyle","top","left","height","id","className","selected","style","onClick","function","Token","console","log","zIndex","yPos","xPos","color","Menu","activeView","initGame","toggleSettings","Win","startGame","Game","stacks","i","length","push","key","manageStackAction","selectedStack","tokens","selectedToken","level","quitGame","moveCounter","Settings","startOver","App","state","game","tokenSet","colorSet","stackCapacity","previouslySelectedStack","previousView","chooseRandomStack","bind","selectStack","deselectStack","moveToken","this","checkSavedLevel","localStorage","getItem","setItem","lvl","setState","lvlup","setupGame","stackQuantity","Math","floor","colors","stackPositions","positionStacks","stack","contents","tokenCounter","j","chosenStack","token","stackPos","rowQuantity","ceil","fullRowQuantity","remainderRowQuantity","rowInventory","centerYOffset","centerXOffset","coords","stackSet","stackChoice","random","oldStackContent","Array","from","pop","map","el","topToken","stackID","newStackContent","checkForWin","endGame","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uSAmBeA,MAjBf,SAAeC,GACX,IAAMC,EAAW,CACbC,IAAKF,EAAME,IACXC,KAAMH,EAAMG,KACZC,OAAQJ,EAAMI,QAEdC,EAAKL,EAAMK,GACXC,EAAY,QAKhB,OAJIN,EAAMO,WAAaP,EAAMK,KACzBC,GAAa,aAIb,yBAAKD,GAAI,IAAML,EAAMK,GAAIC,UAAWA,EAAWE,MAAOP,EAAUQ,QAAS,kBAAMT,EAAMU,SAASL,O,MCIvFM,MAhBf,SAAeX,GACXY,QAAQC,IAAIb,EAAMc,QAClB,IAAIb,EAAW,CACXC,IAAKF,EAAMe,KACXZ,KAAMH,EAAMgB,KACZF,OAAQd,EAAMc,QAEdR,EAAY,SAAWN,EAAMiB,MAIjC,OAHIjB,EAAMO,WAAaP,EAAMK,KACzBC,GAAa,aAGb,yBAAKA,UAAWA,EAAWE,MAAOP,EAAUI,GAAI,IAAML,EAAMK,MCIrDa,MAjBf,SAAclB,GACV,IAAIM,EAAY,OAKhB,MAJyB,UAArBN,EAAMmB,aACNb,GAAa,WAIb,yBAAKA,UAAWA,GACZ,6BACI,uCACA,4BAAQA,UAAU,SAASG,QAAS,kBAAMT,EAAMoB,aAAhD,QACA,4BAAQd,UAAU,8BAA8BG,QAAS,kBAAMT,EAAMqB,mBAArE,eCKDC,MAhBf,SAAatB,GACT,IAAIM,EAAY,OAKhB,MAJyB,QAArBN,EAAMmB,aACNb,GAAa,WAIb,yBAAKA,UAAWA,GACZ,yBAAKA,UAAU,eACX,2CACA,4BAAQA,UAAU,SAASG,QAAS,kBAAMT,EAAMuB,WAAU,KAA1D,eCgCDC,MAxCf,SAAcxB,GACV,IAAIM,EAAY,OACS,SAArBN,EAAMmB,aACNb,GAAa,WAKjB,IAFA,IAAImB,EAAS,GAEJC,EAAI,EAAGA,EAAI1B,EAAMyB,OAAOE,OAAQD,IAAK,CAC1C,IAAIV,EAAO,eAAiBhB,EAAMyB,OAAOC,GAAGV,KAAO,MAC/CD,EAAO,QAAUf,EAAMyB,OAAOC,GAAGX,KAAO,aAI5CU,EAAOG,KAAK,kBAAC,EAAD,CAAO1B,IAAKa,EAAMZ,KAAMa,EAAMZ,OAH7B,QAG6CC,GAAIqB,EAAGG,IAAKH,EAAGhB,SAAUV,EAAM8B,kBAAmBvB,SAAUP,EAAM+B,iBAIhI,IADA,IAAIC,EAAS,GACJN,EAAI,EAAGA,EAAI1B,EAAMgC,OAAOL,OAAQD,IAAK,CAC1C,IAAIV,EAAO,QAAUhB,EAAMgC,OAAON,GAAGV,KAAO,aACxCD,EAAO,QAAUf,EAAMgC,OAAON,GAAGX,KAAO,aACxCD,EAASd,EAAMgC,OAAON,GAAGZ,OAC7BkB,EAAOJ,KAAK,kBAAC,EAAD,CAAOvB,GAAIL,EAAMgC,OAAON,GAAGrB,GAAIwB,IAAKH,EAAGT,MAAOjB,EAAMgC,OAAON,GAAGT,MAAOD,KAAMA,EAAMD,KAAMA,EAAMD,OAAQA,EAAQP,SAAUP,EAAMiC,iBAG7I,OACI,yBAAK3B,UAAWA,GACZ,6BACKmB,EACAO,GAEL,6BACI,uBAAG1B,UAAU,OAAON,EAAMkC,OAC1B,4BAAQ5B,UAAU,qBAAqBG,QAAS,kBAAMT,EAAMmC,aAA5D,QACA,uBAAG7B,UAAU,WAAWN,EAAMoC,gBCnB/BC,MAjBf,SAAkBrC,GACd,IAAIM,EAAY,OAKhB,MAJyB,aAArBN,EAAMmB,aACNb,GAAa,WAIb,yBAAKA,UAAWA,GACZ,yBAAKA,UAAU,IACX,wCACA,oCAAUN,EAAMkC,MAAM,4BAAQ5B,UAAU,SAASG,QAAS,kBAAMT,EAAMsC,cAAhD,eACtB,4BAAQhC,UAAU,8BAA8BG,QAAS,kBAAMT,EAAMmC,aAArE,WCwWDI,E,kDA3Wb,WAAYvC,GAAQ,IAAD,8BACjB,cAAMA,IACDwC,MAAQ,CACXrB,WAAY,QACZa,OAAQ,GACRP,OAAQ,GACRgB,KAAM,CACJC,SAAU,EACVC,SAAU,EACVlB,OAAQ,EACRmB,cAAe,EACfV,MAAO,GAETH,cAAe,KACfc,wBAAyB,KACzBZ,cAAe,KACfG,YAAa,EACbU,aAAc,SAEhB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKzB,UAAY,EAAKA,UAAUyB,KAAf,gBACjB,EAAKlB,kBAAoB,EAAKA,kBAAkBkB,KAAvB,gBACzB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBACrB,EAAKG,UAAY,EAAKA,UAAUH,KAAf,gBACjB,EAAKb,SAAW,EAAKA,SAASa,KAAd,gBAChB,EAAK5B,SAAW,EAAKA,SAAS4B,KAAd,gBAChB,EAAK3B,eAAiB,EAAKA,eAAe2B,KAApB,gBACtB,EAAKV,UAAY,EAAKA,UAAUU,KAAf,gBA5BA,E,gEAgCjBI,KAAKC,oB,wCAIAC,aAAaC,QAAQ,UACxBD,aAAaE,QAAQ,QAAS,GAEhC,IAAIC,EAAMH,aAAaC,QAAQ,SAC/BH,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBC,KAAK,eACAD,EAAMC,KADP,CAEFP,MAAOuB,U,+BAKJE,GACP/C,QAAQC,IAAI,aACPyC,aAAaC,QAAQ,UACxBD,aAAaE,QAAQ,QAAS,GAEhC,IAAIC,EAAML,KAAKZ,MAAMC,KAAKP,MACtByB,GACFF,IAEFH,aAAaE,QAAQ,QAASC,GAE9BL,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBJ,YAAa,EACbK,KAAK,eACAD,EAAMC,KADP,CAEFP,MAAOuB,QAEP,WAAYL,KAAKQ,iB,kCAIrBhD,QAAQC,IAAI,cACZ,IAAIgD,EAAiBC,KAAKC,MAA8B,IAAxBX,KAAKZ,MAAMC,KAAKP,OAAgB,EAChEtB,QAAQC,IAAI,mBAAqBgD,GACjCT,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBC,KAAK,eACAD,EAAMC,KADP,CAEFhB,OAAQoC,EACRlB,SAAUkB,EAAgB,QAE1B,WAAYT,KAAK7B,iB,kCAIrBX,QAAQC,IAAI,cACZ,IAAMmD,EAAS,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,MAAO,QAAS,QAAS,OAAQ,OAEpFC,EAAiBb,KAAKc,eAAed,KAAKZ,MAAMC,KAAKhB,QACzDb,QAAQC,IAAIoD,GAEZ,IADA,IAAIxC,EAAS,GACJC,EAAI,EAAGA,EAAI0B,KAAKZ,MAAMC,KAAKhB,OAAQC,IAAK,CAC/C,IAAIyC,EAAQ,CACV9D,GAAIqB,EACJV,KAAMiD,EAAevC,GAAGV,KACxBD,KAAMkD,EAAevC,GAAGX,KACxBqD,SAAU,GACV7D,UAAU,GAEZkB,EAAOG,KAAKuC,GAEdvD,QAAQC,IAAIY,GAIZ,IAFA,IAAIO,EAAS,GACTqC,EAAe,EACV3C,EAAI,EAAGA,EAAK0B,KAAKZ,MAAMC,KAAKC,SAAWhB,IAC9C,IAAK,IAAI4C,EAAI,EAAGA,EAAIlB,KAAKZ,MAAMC,KAAKE,SAAU2B,IAAK,CAEjD,IAAIC,EAAcnB,KAAKL,kBAAkBtB,GACrC+C,EAAQ,CACVnE,GAAIgE,EACJpD,MAAO+C,EAAOM,GACdH,MAAOI,EACPE,SAAUhD,EAAO8C,GAAaH,SAASzC,OACvCX,KAAMS,EAAO8C,GAAavD,KAC1BD,KAA8C,IAAtCU,EAAO8C,GAAaH,SAASzC,QAAgBF,EAAO8C,GAAaxD,KAAO,IAAM,KAExFsD,IACA5C,EAAO8C,GAAaH,SAASxC,KAAK4C,EAAMnE,IACxC2B,EAAOJ,KAAK4C,GAGhB5D,QAAQC,IAAI,sBACZuC,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBrB,WAAY,OACZM,OAAQA,EACRO,OAAQA,MACN,WAAYpB,QAAQC,IAAIuC,KAAKZ,MAAMf,a,qCAG1BA,GACbb,QAAQC,IAAI,mBACZ,IAKIgD,EAAgBpC,EAChBiD,EAAcZ,KAAKa,KAAKd,EANP,GAOjBe,EAAkBd,KAAKa,KAAKd,EAAgBa,GAC5CG,EAAuBhB,EAAgBe,EACd,IAAzBC,IACFA,EAAuBD,GAEzB,IAAIE,EAAe,GACnB,GAAIjB,EAbiB,EAcnBiB,EAAalD,KAAKiC,OACb,CACLiB,EAAalD,KAAKiD,GAClB,IAAK,IAAInD,EAAI,EAAGA,EAAIgD,EAAc,EAAGhD,IACnCoD,EAAalD,KAAKgD,GAOtB,IAFA,IAAIX,EAAiB,GACjBc,GAtBgB,IAsBGL,EArBH,IAqBkCA,EAAc,IAAqB,EAChFhD,EAAI,EAAGA,EAAIoD,EAAanD,OAAQD,IAEvC,IADA,IAAIsD,GAzBa,GAyBMF,EAAapD,GAvBlB,IAuBuCoD,EAAapD,GAAK,IAAqB,EACxF4C,EAAI,EAAGA,EAAIQ,EAAapD,GAAI4C,IAAK,CACvC,IAAIW,EAAS,CACXjE,KA5Ba,GA4BOsD,EA1BN,GA0B0BA,EAAKU,EAC7CjE,KA5Bc,IA4BOW,EA3BP,GA2B2BA,EAAKqD,GAEhDd,EAAerC,KAAKqD,GAIxB,OAAOhB,I,wCAGSiB,GAChBtE,QAAQC,IAAI,uBAEZ,IADA,IAAIsE,EAAcrB,KAAKC,MAAMD,KAAKsB,SAAWhC,KAAKZ,MAAMC,KAAKhB,QACtDyD,EAASC,GAAaf,SAASzC,OAASyB,KAAKZ,MAAMC,KAAKG,cAAgB,GAC7EuC,EAAcrB,KAAKC,MAAMD,KAAKsB,SAAWhC,KAAKZ,MAAMC,KAAKhB,QAE3D,OAAO0D,I,wCAGS9E,GAChB,GAAiC,OAA7B+C,KAAKZ,MAAMT,cAAwB,CACrC,KAAIqB,KAAKZ,MAAMf,OAAOpB,GAAI+D,SAASzC,OAAS,GAM1C,OALAyB,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBK,wBAAyBxC,MAE3B+C,KAAKH,YAAY5C,QAKnB,GAAI+C,KAAKZ,MAAMT,gBAAkB1B,EAC/B+C,KAAKF,cAAc7C,QAEnB,GAAI+C,KAAKZ,MAAMf,OAAOpB,GAAI+D,SAASzC,QAAUyB,KAAKZ,MAAMC,KAAKG,cAC3DQ,KAAKF,cAAcE,KAAKZ,MAAMK,6BACzB,CACL,IAAIwC,EAAkBC,MAAMC,KAAKnC,KAAKZ,MAAMf,OAAO2B,KAAKZ,MAAMK,yBAAyBuB,UAEvFiB,EAAgBG,MAEhBpC,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBf,OAAQe,EAAMf,OAAOgE,KACnB,SAAAC,GAAE,OAAKA,EAAGrF,KAAOmC,EAAMK,wBAAjB,eACD6C,EADC,CAEJtB,SAAUiB,IACRK,SAEJ,WAAYtC,KAAKD,UAAU9C,S,kCAM3BA,GACV,IAAIsF,EACJA,EAAWvC,KAAKZ,MAAMf,OAAOpB,GAAI+D,SAAShB,KAAKZ,MAAMf,OAAOpB,GAAI+D,SAASzC,OAAS,GAClFyB,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBT,cAAe1B,EACf4B,cAAe0D,Q,oCAILtF,GAEZ+C,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBT,cAAe,KACfE,cAAe,W,gCAIT2D,GAER,IAAI/D,EAAMuB,KAAKZ,MAAMP,cACjB4D,EAAkBP,MAAMC,KAAKnC,KAAKZ,MAAMf,OAAOmE,GAASxB,UAE5DyB,EAAgBjE,KAAKwB,KAAKZ,MAAMP,eAChCmB,KAAKF,cAAc0C,GACnBxC,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBR,OAAQQ,EAAMR,OAAOyD,KACnB,SAAAC,GAAE,OAAKA,EAAGrF,KAAOwB,EAAX,eACD6D,EADC,CAEJ1E,KAAMwB,EAAMf,OAAOmE,GAAS5E,KAC5BD,KAAiD,IAAxCyB,EAAMf,OAAOmE,GAASxB,SAASzC,QAAgBa,EAAMf,OAAOmE,GAAS7E,KAAO,IAAM,IAC3FD,OAAQ0B,EAAMf,OAAOmE,GAASxB,SAASzC,SACrC+D,KAENjE,OAAQe,EAAMf,OAAOgE,KACnB,SAAAC,GAAE,OAAKA,EAAGrF,KAAOuF,EAAX,eACDF,EADC,CAEJtB,SAAUyB,IACRH,KAENtD,YAAaI,EAAMJ,iBACjBgB,KAAK0C,e,oCAKTlF,QAAQC,IAAI,iBACZ,IAAK,IAAIa,EAAI,EAAGA,EAAI0B,KAAKZ,MAAMf,OAAOE,OAAQD,IAAK,CAGjD,GAAI0B,KAAKZ,MAAMf,OAAOC,GAAG0C,SAASzC,SAAWyB,KAAKZ,MAAMC,KAAKC,UAAqD,IAAzCU,KAAKZ,MAAMf,OAAOC,GAAG0C,SAASzC,OAErG,OAEF,IAAK,IAAI2C,EAAI,EAAGA,EAAIlB,KAAKZ,MAAMf,OAAOC,GAAG0C,SAASzC,OAAQ2C,IAExD,GADA1D,QAAQC,IAAI,SAAYa,EAAI,WAAa4C,GACrClB,KAAKZ,MAAMR,OAAOoB,KAAKZ,MAAMf,OAAOC,GAAG0C,SAASE,IAAIrD,QAAUmC,KAAKZ,MAAMR,OAAOoB,KAAKZ,MAAMf,OAAOC,GAAG0C,SAAS,IAAInD,MAEpH,OAINmC,KAAK2C,UACLnF,QAAQC,IAAI,a,gCAIZuC,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBrB,WAAY,Y,iCAKdiC,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBrB,WAAY,c,iCAKdP,QAAQC,IAAIuC,KAAKZ,S,uCAIa,aAA1BY,KAAKZ,MAAMrB,WACbiC,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBrB,WAAY,WACZ2B,aAAcN,EAAMM,iBAGtBM,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBrB,WAAYqB,EAAMM,aAClBA,aAAc,iB,kCAMlBQ,aAAaE,QAAQ,QAAS,GAC9BJ,KAAKM,UAAS,SAAClB,GAAD,MAAY,CACxBC,KAAK,eACAD,EAAMC,KADP,CAEFP,MAAO,U,+BAOX,IADA,IAAIT,EAAS,GACJC,EAAI,EAAGA,EAAI0B,KAAKZ,MAAMf,OAAOE,OAAQD,IAAK,CACjD,IAAIV,EAAOoC,KAAKZ,MAAMf,OAAOC,GAAGV,KAAQ,IACpCZ,EAA0C,GAAhCgD,KAAKZ,MAAMC,KAAKG,cAAsB,KACpDnB,EAAOG,KAAK,kBAAC,EAAD,CAAO1B,IAAI,MAAMC,KAAMa,EAAMZ,OAAQA,EAAQC,GAAIqB,EAAGhB,SAAU0C,KAAKtB,kBAAmBvB,SAAU6C,KAAKZ,MAAMT,iBAGzH,IADA,IAAIC,EAAS,GACJN,EAAI,EAAGA,EAAI0B,KAAKZ,MAAMR,OAAOL,OAAQD,IAAK,CACjD,IAAIV,EAAOoC,KAAKZ,MAAMR,OAAON,GAAGV,KAAQ,IACpCD,EAAOqC,KAAKZ,MAAMR,OAAON,GAAGX,KAAQ,IACxCiB,EAAOJ,KAAK,kBAAC,EAAD,CAAOvB,GAAI+C,KAAKZ,MAAMR,OAAON,GAAGrB,GAAIY,MAAOmC,KAAKZ,MAAMR,OAAON,GAAGT,MAAOD,KAAMA,EAAMD,KAAMA,EAAMR,SAAU6C,KAAKZ,MAAMP,iBAGlI,OACI,yBAAK3B,UAAU,OACb,kBAAC,EAAD,CACEa,WAAYiC,KAAKZ,MAAMrB,WACvBgB,SAAUiB,KAAKjB,SACfD,MAAOkB,KAAKZ,MAAMC,KAAKP,MACvBI,UAAWc,KAAKd,YAElB,kBAAC,EAAD,CACElB,SAAUgC,KAAKhC,SACfD,WAAYiC,KAAKZ,MAAMrB,WACvBe,MAAOkB,KAAKZ,MAAMC,KAAKP,MACvBb,eAAgB+B,KAAK/B,iBAEvB,kBAAC,EAAD,CAAKE,UAAW6B,KAAKhC,SAAUD,WAAYiC,KAAKZ,MAAMrB,WAAYe,MAAOkB,KAAKZ,MAAMC,KAAKP,QACzF,kBAAC,EAAD,CACET,OAAQ2B,KAAKZ,MAAMf,OACnBgB,KAAMW,KAAKZ,MAAMC,KACjBQ,YAAaG,KAAKZ,MAAMT,cACxBC,OAAQoB,KAAKZ,MAAMR,OACnBC,cAAemB,KAAKZ,MAAMP,cAC1Bd,WAAYiC,KAAKZ,MAAMrB,WACvBW,kBAAmBsB,KAAKtB,kBACxBK,SAAUiB,KAAKjB,SACfD,MAAOkB,KAAKZ,MAAMC,KAAKP,MACvBE,YAAagB,KAAKZ,MAAMJ,mB,GApWlB4D,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvG,QAAQuG,MAAMA,EAAMC,c","file":"static/js/main.155d426a.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Stack(props) {\n    const divStyle = {\n        top: props.top,\n        left: props.left,\n        height: props.height\n    };\n    let id = props.id;\n    let className = 'stack';\n    if (props.selected === props.id) {\n        className += ' selected';\n    }\n\n    return (\n        <div id={'s' + props.id} className={className} style={divStyle} onClick={() => props.function(id)}></div>\n    )\n}\n\nexport default Stack","import React from 'react';\nimport './colors.scss';\n\nfunction Token(props) {\n    console.log(props.zIndex);\n    var divStyle = {\n        top: props.yPos,\n        left: props.xPos,\n        zIndex: props.zIndex\n    };\n    let className = 'token ' + props.color;\n    if (props.selected === props.id) {\n        className += ' selected';\n    }\n    return (\n        <div className={className} style={divStyle} id={'t' + props.id}></div>\n    )\n}\n\nexport default Token","import React from 'react';\n\nfunction Menu(props) {\n    let className = 'view';\n    if (props.activeView === 'start') {\n        className += ' active';\n    }\n\n    return (\n        <div className={className}>\n            <div>\n                <h1>Stacker</h1>\n                <button className=\"button\" onClick={() => props.initGame()}>Play</button>\n                <button className=\"button exit-button top left\" onClick={() => props.toggleSettings()}>Settings</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Menu","import React from 'react';\n\nfunction Win(props) {\n    let className = 'view';\n    if (props.activeView === 'win') {\n        className += ' active';\n    }\n\n    return (\n        <div className={className}>\n            <div className=\"center-view\">\n                <h1>You Stacked</h1>\n                <button className=\"button\" onClick={() => props.startGame(true)}>Continue</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Win","import React from 'react';\nimport Stack from './stack';\nimport Token from './token';\n\nfunction Game(props) {\n    let className = 'view';\n    if (props.activeView === 'game') {\n        className += ' active';\n    }\n\n    let stacks = [];\n    // var i;\n    for (let i = 0; i < props.stacks.length; i++) {\n        let xPos = 'calc(50vw + ' + props.stacks[i].xPos + 'px)';\n        let yPos = 'calc(' + props.stacks[i].yPos + 'px + 50vh)';\n        let height = '103px';\n        // console.log(props.stacks[i].yPos);\n        // console.log(yPos);\n        stacks.push(<Stack top={yPos} left={xPos} height={height} id={i} key={i} function={props.manageStackAction} selected={props.selectedStack} />);\n    }\n\n    let tokens = [];\n    for (let i = 0; i < props.tokens.length; i++) {\n        let xPos = 'calc(' + props.tokens[i].xPos + 'px + 50vw)';\n        let yPos = 'calc(' + props.tokens[i].yPos + 'px + 50vh)';\n        let zIndex = props.tokens[i].zIndex;\n        tokens.push(<Token id={props.tokens[i].id} key={i} color={props.tokens[i].color} xPos={xPos} yPos={yPos} zIndex={zIndex} selected={props.selectedToken} />);\n    }\n\n    return (\n        <div className={className}>\n            <div>\n                {stacks}\n                {tokens}\n            </div>\n            <div>\n                <p className=\"hud\">{props.level}</p>\n                <button className=\"button exit-button\" onClick={() => props.quitGame()}>Exit</button>\n                <p className=\"counter\">{props.moveCounter}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Game","import React from 'react';\n\nfunction Settings(props) {\n    let className = 'view';\n    if (props.activeView === 'settings') {\n        className += ' active';\n    }\n\n    return (\n        <div className={className}>\n            <div className=\"\">\n                <h1>Settings</h1>\n                <p>Level {props.level}<button className=\"button\" onClick={() => props.startOver()}>Start Over</button></p>\n                <button className=\"button exit-button top left\" onClick={() => props.quitGame()}>Exit</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Settings","import React from 'react';\nimport './App.css';\nimport Stack from './stack';\nimport Token from './token';\nimport Menu from './menu';\nimport Win from './win';\nimport Game from './game';\nimport Settings from './settings';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      activeView: 'start',\n      tokens: [],\n      stacks: [],\n      game: {\n        tokenSet: 4,\n        colorSet: 2,\n        stacks: 3,\n        stackCapacity: 4,\n        level: 1\n      },\n      selectedStack: null,\n      previouslySelectedStack: null,\n      selectedToken: null,\n      moveCounter: 0,\n      previousView: 'start'\n    }\n    this.chooseRandomStack = this.chooseRandomStack.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.manageStackAction = this.manageStackAction.bind(this);\n    this.selectStack = this.selectStack.bind(this);\n    this.deselectStack = this.deselectStack.bind(this);\n    this.moveToken = this.moveToken.bind(this);\n    this.quitGame = this.quitGame.bind(this);\n    this.initGame = this.initGame.bind(this);\n    this.toggleSettings = this.toggleSettings.bind(this);\n    this.startOver = this.startOver.bind(this);\n  }\n  componentDidMount() {\n    // console.log('hey der hey')\n    this.checkSavedLevel();\n  }\n\n  checkSavedLevel() {\n    if (!localStorage.getItem('level')) {\n      localStorage.setItem('level', 1);\n    }\n    let lvl = localStorage.getItem('level');\n    this.setState((state) => ({\n      game: {\n        ...state.game,\n        level: lvl\n      }\n    }))\n  }\n\n  initGame(lvlup) {\n    console.log('init game');\n    if (!localStorage.getItem('level')) {\n      localStorage.setItem('level', 1);\n    }\n    let lvl = this.state.game.level;\n    if (lvlup) {\n      lvl++;\n    }\n    localStorage.setItem('level', lvl);\n\n    this.setState((state) => ({\n      moveCounter: 0,\n      game: {\n        ...state.game,\n        level: lvl\n      }\n    }), function() {this.setupGame()})\n  }\n\n  setupGame() {\n    console.log('setup game');\n    var stackQuantity = (Math.floor(this.state.game.level * 0.25) + 3);\n    console.log('stack quantity: ' + stackQuantity);\n    this.setState((state) => ({\n      game: {\n        ...state.game,\n        stacks: stackQuantity,\n        colorSet: stackQuantity - 1\n      }\n    }), function() {this.startGame()})\n  }\n\n  startGame() {\n    console.log('start game');\n    const colors = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'];\n    // let xPosSpacing = 48;\n    var stackPositions = this.positionStacks(this.state.game.stacks);\n    console.log(stackPositions);\n    let stacks = [];\n    for (let i = 0; i < this.state.game.stacks; i++) {\n      let stack = {\n        id: i,\n        xPos: stackPositions[i].xPos,\n        yPos: stackPositions[i].yPos,\n        contents: [],\n        selected: false\n      }\n      stacks.push(stack);\n    }\n    console.log(stacks);\n\n    let tokens = [];\n    let tokenCounter = 0;\n    for (let i = 0; i < (this.state.game.tokenSet); i++) {\n      for (var j = 0; j < this.state.game.colorSet; j++) {\n        \n        let chosenStack = this.chooseRandomStack(stacks);\n        let token = {\n          id: tokenCounter,\n          color: colors[j],\n          stack: chosenStack,\n          stackPos: stacks[chosenStack].contents.length,\n          xPos: stacks[chosenStack].xPos,\n          yPos: (-stacks[chosenStack].contents.length * 25) + (stacks[chosenStack].yPos + 103 - 25)\n        }\n        tokenCounter++;\n        stacks[chosenStack].contents.push(token.id)\n        tokens.push(token);\n      }\n    }\n    console.log('ready to set state');\n    this.setState((state) => ({\n      activeView: 'game',\n      stacks: stacks,\n      tokens: tokens\n    }), function() {console.log(this.state.stacks)})\n  }\n\n  positionStacks(stacks) {\n    console.log('position stacks');\n    const maxRowLength = 5;\n    const stackWidth = 48;\n    const stackHeight = 103;\n    const stackSpacer = 12;\n\n    var stackQuantity = stacks;\n    var rowQuantity = Math.ceil(stackQuantity / maxRowLength);\n    var fullRowQuantity = Math.ceil(stackQuantity / rowQuantity);\n    var remainderRowQuantity = stackQuantity % fullRowQuantity;\n    if (remainderRowQuantity === 0) {\n      remainderRowQuantity = fullRowQuantity;\n    }\n    var rowInventory = [];\n    if (stackQuantity < maxRowLength) {\n      rowInventory.push(stackQuantity);\n    } else {\n      rowInventory.push(remainderRowQuantity);\n      for (let i = 0; i < rowQuantity - 1; i++) {\n        rowInventory.push(fullRowQuantity);\n      }\n    }\n    // console.log(rowInventory);\n    \n    var stackPositions = [];\n    let centerYOffset = (((rowQuantity * stackHeight) + ((rowQuantity - 1) * stackSpacer)) / 2);\n    for (let i = 0; i < rowInventory.length; i++) {\n      let centerXOffset = (((rowInventory[i] * stackWidth) + ((rowInventory[i] - 1) * stackSpacer)) / 2);\n      for(var j = 0; j < rowInventory[i]; j++) {\n        let coords = {\n          xPos: (stackWidth * j) + (stackSpacer * j) - centerXOffset,\n          yPos: (stackHeight * i) + (stackSpacer * i) - centerYOffset\n        }\n        stackPositions.push(coords);\n      }\n    }\n    // console.log(stackPositions);\n    return stackPositions;\n  }\n\n  chooseRandomStack(stackSet) {\n    console.log('choose random stack');\n    var stackChoice = Math.floor(Math.random() * this.state.game.stacks);\n    while (stackSet[stackChoice].contents.length > this.state.game.stackCapacity - 1) {\n      stackChoice = Math.floor(Math.random() * this.state.game.stacks)\n    }\n    return stackChoice;\n  }\n\n  manageStackAction(id) {\n    if (this.state.selectedStack === null) {\n      if (this.state.stacks[id].contents.length > 0) {\n        this.setState((state) => ({\n          previouslySelectedStack: id\n        }))\n        this.selectStack(id);\n      } else {\n        return\n      }\n    } else {\n      if (this.state.selectedStack === id) {\n        this.deselectStack(id);\n      } else {\n        if (this.state.stacks[id].contents.length >= this.state.game.stackCapacity) {\n          this.deselectStack(this.state.previouslySelectedStack);\n        } else {\n          let oldStackContent = Array.from(this.state.stacks[this.state.previouslySelectedStack].contents);\n          // console.log('old stack content below'); \n          oldStackContent.pop();\n          // console.log(oldStackContent);\n          this.setState((state) => ({\n            stacks: state.stacks.map(\n              el => (el.id === state.previouslySelectedStack) ? {\n                ...el,\n                contents: oldStackContent,\n              } : el\n            )\n          }), function() {this.moveToken(id)})\n        }\n      }\n    }\n  }\n\n  selectStack(id) {\n    let topToken;\n    topToken = this.state.stacks[id].contents[this.state.stacks[id].contents.length - 1];\n    this.setState((state) => ({\n      selectedStack: id,\n      selectedToken: topToken\n    }))\n  }\n\n  deselectStack(id) {\n    // console.log('deselect');\n    this.setState((state) => ({\n      selectedStack: null,\n      selectedToken: null\n    }))\n  }\n\n  moveToken(stackID) {\n    // console.log(stackID);\n    let key = this.state.selectedToken;\n    let newStackContent = Array.from(this.state.stacks[stackID].contents);\n    // console.log(newStackContent);\n    newStackContent.push(this.state.selectedToken);\n    this.deselectStack(stackID);\n    this.setState((state) => ({\n      tokens: state.tokens.map(\n        el => (el.id === key) ? {\n          ...el,\n          xPos: state.stacks[stackID].xPos,\n          yPos: ((-state.stacks[stackID].contents.length * 25) + (state.stacks[stackID].yPos + 103 - 25)),\n          zIndex: state.stacks[stackID].contents.length\n        } : el\n      ),\n      stacks: state.stacks.map(\n        el => (el.id === stackID) ? {\n          ...el,\n          contents: newStackContent,\n        } : el\n      ),\n      moveCounter: state.moveCounter++\n    }), this.checkForWin)\n    // console.log(this.state.stacks);\n  }\n\n  checkForWin() {\n    console.log('CHECK FOR WIN');\n    for (let i = 0; i < this.state.stacks.length; i++) {\n      // console.log('Stack ' + i);\n      // console.log('Contents: ' + this.state.stacks[i].contents);\n      if (this.state.stacks[i].contents.length !== this.state.game.tokenSet && this.state.stacks[i].contents.length !== 0) {\n        // console.log('Stack not full, quit this check');\n        return\n      }\n      for (let j = 0; j < this.state.stacks[i].contents.length; j++) {\n        console.log('stack '  + i + ', token ' + j);\n        if (this.state.tokens[this.state.stacks[i].contents[j]].color !== this.state.tokens[this.state.stacks[i].contents[0]].color) {\n          // console.log('fail');\n          return\n        }\n      }\n    }\n    this.endGame();\n    console.log('you win');\n  }\n\n  endGame() {\n    this.setState((state) => ({\n      activeView: 'win',\n    }));\n  }\n\n  quitGame() {\n    this.setState((state) => ({\n      activeView: 'start',\n    }));\n  }\n\n  getState() {\n    console.log(this.state);\n  }\n\n  toggleSettings() {\n    if (this.state.activeView !== 'settings') {\n      this.setState((state) => ({\n        activeView: 'settings',\n        previousView: state.previousView\n      }));\n    } else {\n      this.setState((state) => ({\n        activeView: state.previousView,\n        previousView: 'settings'\n      }));\n    }\n  }\n\n  startOver() {\n    localStorage.setItem('level', 1);\n    this.setState((state) => ({\n      game: {\n        ...state.game,\n        level: 1\n      }\n    }))\n  }\n\n  render() {\n    let stacks = [];\n    for (let i = 0; i < this.state.stacks.length; i++) {\n      let xPos = this.state.stacks[i].xPos  + '%';\n      let height = (this.state.game.stackCapacity * 45) + 'px';\n      stacks.push(<Stack top=\"50%\" left={xPos} height={height} id={i} function={this.manageStackAction} selected={this.state.selectedStack} />);\n    }\n    let tokens = [];\n    for (let i = 0; i < this.state.tokens.length; i++) {\n      let xPos = this.state.tokens[i].xPos  + '%';\n      let yPos = this.state.tokens[i].yPos  + '%';\n      tokens.push(<Token id={this.state.tokens[i].id} color={this.state.tokens[i].color} xPos={xPos} yPos={yPos} selected={this.state.selectedToken} />);\n    }\n\n    return (\n        <div className=\"App\">\n          <Settings \n            activeView={this.state.activeView}\n            quitGame={this.quitGame}\n            level={this.state.game.level}\n            startOver={this.startOver}\n          />\n          <Menu\n            initGame={this.initGame}\n            activeView={this.state.activeView}\n            level={this.state.game.level} \n            toggleSettings={this.toggleSettings}\n          />\n          <Win startGame={this.initGame} activeView={this.state.activeView} level={this.state.game.level} />\n          <Game \n            stacks={this.state.stacks}\n            game={this.state.game}\n            selectStack={this.state.selectedStack}\n            tokens={this.state.tokens}\n            selectedToken={this.state.selectedToken}\n            activeView={this.state.activeView} \n            manageStackAction={this.manageStackAction}\n            quitGame={this.quitGame}\n            level={this.state.game.level}\n            moveCounter={this.state.moveCounter}\n          />\n\n        </div>\n      );\n    }\n  }\n  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}